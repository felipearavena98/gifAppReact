{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,uBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,UACE,6BAAKD,IACL,uBAAOQ,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,c,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,8DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEnC,OADAc,QAAQC,IAAIL,EAAOV,GAEjB,sBAAKgB,UAAU,wCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACxB,ECD0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GACtBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IASGuB,EDrB2BK,CAAa5B,GAAjCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,mCAAd,SAAkDlB,IACjDsB,GAAW,mBAAGJ,UAAU,kCAAb,sBACZ,qBAAKA,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aETnBkB,EAAe,WAE1B,MAAoC3C,mBAAS,CAAC,WAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KASA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG6C,EAAWrB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MClBxB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.00482b32.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('')\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats])\r\n      setInputValue('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h1>{inputValue}</h1>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n}\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category,\r\n  )}&limit=5&api_key=boa0gHC3Nr708cbN9V2mqca9XSubujrI`\r\n  const resp = await fetch(url)\r\n  const { data } = await resp.json()\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    }\r\n  })\r\n\r\n  return gifs\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  console.log(title, url)\r\n  return (\r\n    <div className=\"card animate__animated animate__jello\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__jello\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flip\">Cargando</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      })\r\n    })\r\n  }, [category])\r\n\r\n  //setTimeout(() => {\r\n  //  setState({\r\n  //    data: [1, 2, 3, 4, 5, 6, 7],\r\n  //    loading: false,\r\n  //  })\r\n  //}, 3000)\r\n\r\n  return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n  //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n  const [categories, setCategories] = useState(['Naruto'])\r\n\r\n  //const handleAdd = () => {\r\n  //Solucion 1\r\n  //setCategories([...categories, 'HunterXhunter'])\r\n  //Solucion 2\r\n  //setCategories((cats) => [...cats, 'HunterXhunter'])\r\n  //}\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { GifExpertApp } from './GifExpertApp'\nimport './index.css'\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))\n\n//  GifExpertApp\n//  <h2>GifExpertApp</h2>\n//  <hr/>\n"],"sourceRoot":""}